== README

This README would normally document whatever steps are necessary to get the
application up and running.

Things you may want to cover:

* Ruby version

* System dependencies

* Configuration

* Database creation

* Database initialization

* How to run the test suite

* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions

* ...


Please feel free to use a different markup language if you do not plan to run
<tt>rake doc:app</tt>.

testing specs for recipes:
name: string
summary: text
description: text

name
- name must be present
- name must be between 5 and 100 characters

summary
- summary must be present
- summary must be bewteen 10 and 150 characters

description
- descriptin must be present
- description must be between 20 and 500 charcters

- chef_id must be present (To be added later on)

testing specs for chefs:
chefname: string
email: string


name
- chefname must be present
- chefname must be between 5 and 100 characters

email
- must be valid
- must be unique (Since we will use this for logins later)
- must be present


For Chefs Authentication System

What we have already:
- Chef model and validations
- Chefs table with columns chefname and email

What we need to do:
Authentication we will use (Has secure password)
- Add passwords to the chefstable so the chefs can be authenticated and logged in
- Use email as login credentials, since email is unique
- Ability to register new chefs to use the app
- Ability to display a chefs profile
- Ability to list all chefs using the app
- Ability for all chefs to login and logout of the app
- Restrict actions, ie edit recipe and like feature to logged in chefs only
- Restricting edit of recipes by chefs who created the recipes

Authentication Updates

1) Show recipe page -> Ability to edit/update only own recipe
2) Navigation partial -> Toggle menu, restrict new
3) Restrict thumbs up/down action to only logged in users
4)Recipe - update to current_user
5) Like - update to current_user
6) Before_action :require_user, except [:show, :index]
7) Before_action :require_same_user for chefs, only: [:edit, :update]

Adding Reviews

Things we will need

1. Migration to create reviews table, body, type = text_field, two foreign keys, reference chef_id, reference recipe_id
2. You'll then need to build the Review model
3. You'll need to create tests for the spec for the model, add validations to the review model (Did this for the chefs and recipes model)
4. Build associations, has_many, belongs_to (This will be between the recipes and the reviews and the chefs and the reviews)
5. Test out associations in rails console
  Grab a local variable recipe = Recipe.first then recipe.reviews should give you all the reviews associated with that recipe
  Grab a local variable chef = Chef.first then chef.reviews should give you all the reviews associated with that chef
6. I associate each recipe with reviews os in the recipe show page we would want a text area where logged in users can add there reviews.
7. Next expose some routes for it so resources :reviews (new, create, show) in the config routes.rb file
8. When the recipes are created we want to ensure that only authenticated chefs can create reviews, before_action require_user
9. Will need to associate chef_id and recipe_id when we create and save the review
10. This will be a model back form so use existing code if possible. Can grab description twext area code to build review text area code. Look for help from the recipes index page to see how we can display the views associated with every recipe
ie Add pagination to the reviews box so that they don't take up huge downloads on the page

Make sure we create this using a git branch feature so that if it doesn't work we can revert back
Other important thing is this is just a suggestion to test us